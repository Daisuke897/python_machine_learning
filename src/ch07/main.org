*アンサンブル学習 異なるモデルの組み合わせ*

#+begin_src emacs-lisp
  (pyvenv-activate "~/project/python_machine_learning")
#+end_src

#+RESULTS:

* アンサンブルによる学習
ベース分類器のアンサンブルの誤分類率を二項分布の確率質量関数として簡単に表せる。

#+begin_src python :session :results value
  from scipy.special import comb
  import math
  def ensemble_error(n_classifier, error):
      k_start = int(math.ceil(n_classifier / 2.))
      probs = [comb(n_classifier, k) * error ** k * (1 - error) ** (n_classifier - k) for k in range(k_start, n_classifier + 1)]
      return sum(probs)

  ensemble_error(n_classifier = 11, error = 0.25)
#+end_src

#+RESULTS:
: 0.03432750701904297

#+begin_src python :session :results file link
  import matplotlib.pyplot as plt
  import numpy as np

  error_range = np.arange(0.0, 1.01, 0.01)
  ens_errors = [ensemble_error(n_classifier = 11, error = error) for error in error_range]
  plt.close("all")
  plt.plot(error_range, ens_errors, label = "Ensemble error", linewidth = 2)
  plt.plot(error_range, error_range, linestyle = "--", label = "Base error", linewidth = 2)
  plt.xlabel("Base error")
  plt.ylabel("Base/Ensemble error")
  plt.legend(loc = "upper left")
  plt.grid(alpha = 0.5)

  fname = "images/07_03.png"
  plt.savefig(fname)
  fname
#+end_src

#+RESULTS:
[[file:images/07_03.png]]

* 多数決による分類器の結合

** 単純な多数決分類器を実装する
重み付き多数決の概念をPythonに置き換える
#+begin_src python :session :results value
  import numpy as np

  np.argmax(np.bincount([0, 0, 1], weights = [0.2, 0.2, 0.6]))
#+end_src

#+RESULTS:
: 1

クラスの確率に基づく重み付き多数決の概念をPythonに置き換える
#+begin_src python :session :results value
  ex = np.array([[0.9, 0.1], [0.8, 0.2], [0.4, 0.6]])
  p = np.average(ex, axis = 0, weights = [0.2, 0.2, 0.6])
  p
#+end_src

#+RESULTS:
| 0.58 | 0.42 |

#+begin_src python :session :results value
  np.argmax(p)
#+end_src

#+RESULTS:
: 0

#+begin_src python :session :results value
  from sklearn.base import BaseEstimator
  from sklearn.base import ClassifierMixin
  from sklearn.preprocessing import LabelEncoder
  from sklearn.base import clone
  from sklearn.pipeline import _name_estimators
  import numpy as np
  import operator

  class MajorityVoteClassifier(BaseEstimator, ClassifierMixin):
      """A majority vote ensemble classifier

      Parameters
      ----------
      classifiers : array-like, shape = [n_classifiers]
        Different classifiers for the ensemble

      vote : str, {'classlabel', 'probability'} (default='classlabel')
        If 'classlabel' the prediction is based on the argmax of
          class labels. Else if 'probability', the argmax of
          the sum of probabilities is used to predict the class label
          (recommended for calibrated classifiers).

      weights : array-like, shape = [n_classifiers], optional (default=None)
        If a list of `int` or `float` values are provided, the classifiers
        are weighted by importance; Uses uniform weights if `weights=None`.
      """

      def __init__(self, classifiers, vote="classlabel", weights=None):
          self.classifiers = classifiers
          self.named_classifiers = {key: value for key, value in _name_estimators(classifiers)}
          self.vote = vote
          self.weights = weights

      def fit(self, X, y):
          """Fit classifiers.

          Parameters
          ----------
          X : {array-like, sparse matrix}, shape = [n_examples, n_features]
              Matrix of training examples.

          y : array-like, shape = [n_examples]
              Vector of target class labels.

          Returns
          -------
          self : object

          """

          if self.vote not in ("probability", "classlabel"):
              raise ValueError("vote must be 'probability' or 'classlabel'" "; got (vote=%r)" % self.vote)

          if self.weights and len(self.weights) != len(self.classifiers):
              raise ValueError("Number of classifiers and weights must be equal" "; got %d weights, %d classifiers" % (len(self.weights), len(self.classifiers)))

          self.lablenc_ = LabelEncoder()
          self.lablenc_.fit(y)
          self.classes_ = self.lablenc_.classes_
          self.classifiers_ = []
          for clf in self.classifiers:
              fitted_clf = clone(clf).fit(X, self.lablenc_.transform(y))
              self.classifiers_.append(fitted_clf)
          return self

      def predict(self, X):
          """ Predict class labels for X.

          Parameters
          ----------
          X : {array-like, sparse matrix}, shape = [n_examples, n_features]
              Matrix of training examples.

          Returns
          ----------
          maj_vote : array-like, shape = [n_examples]
              Predicted class labels.

          """
          if self.vote == "probability":
              maj_vote = np.argmax(self.predict_proba(X), axis=1)
          else:                   # "classlabel" vote
              # Collect results from clf.predict calls
              predictions = np.asarray([clf.predict(X)
                                    for clf in self.classifiers_]).T

              maj_vote = np.apply_along_axis(
                  lambda x:
                  np.argmax(np.bincount(x, weights = self.weights)),
                  axis = 1,
                  arr = predictions)

          maj_vote = self.lablenc_.inverse_transform(maj_vote)
          return maj_vote

      def predict_proba(self, X):
          """ Predict class probabilities for X.

          Parameters
          ----------
          X : {array-like, sparse matrix}, shape = [n_examples, n_features]
              Training vectors, where n_examples is the number of examples and
              n_features is the number of features.

          Returns
          ----------
          avg_proba : array-like, shape = [n_examples, n_classes]
              Weighted average probability for each class per example.

          """
          probas = np.asarray([clf.predict_proba(X) for clf in self.classifiers_])
          avg_proba = np.average(probas, axis = 0, weights = self.weights)
          return avg_proba

      def get_params(self, deep = True):
          """ Get classifier parameter names for GridSearch"""
          if not deep:
              return super(MajorityVoteClassifier, self).get_params(deep = False)
          else:
              out = self.named_classifiers.copy()
              for name, step in self.named_classifiers.items():
                  for key, value in step.get_params(deep = True).items():
                      out["%s__%s" % (name, key)] = value
              return out
#+end_src

#+RESULTS:

** 多数決の原理に基づいて予測を行う
#+begin_src python :session :results value
  from sklearn import datasets
  from sklearn.model_selection import train_test_split
  from sklearn.preprocessing import StandardScaler
  from sklearn.preprocessing import LabelEncoder
  iris = datasets.load_iris()
  X, y = iris.data[50:, [1, 2]], iris.target[50:]
  le = LabelEncoder()
  y = le.fit_transform(y)
#+end_src

#+RESULTS:

Irisデータセットのデータを50%の訓練データと50%のテストデータに分割する
#+begin_src python :session :results value
  X_train, X_test, y_train, y_test = \
      train_test_split(X, y, test_size = 0.5, random_state = 1, stratify = y)
#+end_src

#+RESULTS:

次の3種類の分類器を訓練する
- ロジスティック回帰
- 決定木分類器
- k最近傍法分類器

#+begin_src python :session :results output
  from sklearn.model_selection import cross_val_score
  from sklearn.linear_model import LogisticRegression
  from sklearn.tree import DecisionTreeClassifier
  from sklearn.neighbors import KNeighborsClassifier
  from sklearn.pipeline import Pipeline

  clf1 = LogisticRegression(penalty = "l2", C = 0.001,
                            solver = "lbfgs",
                            random_state = 1)
  clf2 = DecisionTreeClassifier(max_depth = 1,
                                criterion = "entropy",
                                random_state = 0)
  clf3 = KNeighborsClassifier(n_neighbors = 1,
                              p = 2,
                              metric = "minkowski")
  pipe1 = Pipeline([["sc", StandardScaler()], ["clf", clf1]])
  pipe3 = Pipeline([["sc", StandardScaler()], ["clf", clf3]])
  clf_labels = ["Logistic regression", "Decision tree", "KNN"]
  print("10-fold cross validation:\n")
  for clf, label in zip([pipe1, clf2, pipe3], clf_labels):
      scores = cross_val_score(estimator = clf,
                               X = X_train,
                               y = y_train,
                               cv = 10,
                               scoring = "roc_auc")
      print("ROC AUC: %0.2f (+/- %0.2f) [%s]" % (scores.mean(), scores.std(), label))
#+end_src

#+RESULTS:
: 10-fold cross validation:
:
: ROC AUC: 0.92 (+/- 0.15) [Logistic regression]
: ROC AUC: 0.87 (+/- 0.18) [Decision tree]
: ROC AUC: 0.85 (+/- 0.13) [KNN]

個々の分類器をMajorityVoteClassifierオブジェクトで組み合わせる
#+begin_src python :session :results output
  mv_clf = MajorityVoteClassifier(classifiers=[pipe1, clf2, pipe3])
  clf_labels += ["Majority voting"]
  all_clf = [pipe1, clf2, pipe3, mv_clf]
  for clf, label in zip(all_clf, clf_labels):
        scores = cross_val_score(estimator = clf,
                                 X = X_train,
                                 y = y_train,
                                 cv = 10,
                                 scoring = "roc_auc")
        print("ROC AUC: %0.2f (+/- %0.2f) [%s]" % (scores.mean(), scores.std(), label))
#+end_src

#+RESULTS:
: ROC AUC: 0.92 (+/- 0.15) [Logistic regression]
: ROC AUC: 0.87 (+/- 0.18) [Decision tree]
: ROC AUC: 0.85 (+/- 0.13) [KNN]
: ROC AUC: 0.98 (+/- 0.05) [Majority voting]

* アンサンブル分類器の評価とチューニング
テストデータからROC曲線を計算し、`Majorityvoteclassifier`が未知のデータにうまく汎化されるか確認する
#+begin_src python :session :results file link
  from sklearn.metrics import roc_curve
  from sklearn.metrics import auc
  import matplotlib.pyplot as plt

  colors = ["black", "orange", "blue", "green"]
  linestyles = [":", "--", "-.", "-"]

  plt.close("all")

  for clf, label, clr, ls in zip(all_clf, clf_labels, colors, linestyles):
        # 陽性クラスのラベルは1であることが前提
        y_pred = clf.fit(X_train, y_train).predict_proba(X_test)[:, 1]
        fpr, tpr, thresholds = roc_curve(y_true = y_test, y_score = y_pred)
        roc_auc = auc(x = fpr, y = tpr)

        plt.plot(fpr, tpr,
                 color = clr,
                 linestyle = ls,
                 label = "%s (auc = %0.2f)" % (label, roc_auc))

  plt.legend(loc = "lower right")
  plt.plot([0, 1], [0, 1],
           linestyle = "--",
           color = "gray",
           linewidth = 2)
  plt.xlim([-0.1, 1.1])
  plt.ylim([-0.1, 1.1])
  plt.grid(alpha = 0.5)
  plt.xlabel("False positive rate (FPR)")
  plt.ylabel("True positive rate (TPR)")

  fname = "images/07_04.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/07_04.png]]

#+begin_src python :session :results file link
  sc = StandardScaler()
  X_train_std = sc.fit_transform(X_train)
  from itertools import product
  # 決定領域を描画する最小値、最大値を生成
  x_min = X_train_std[:, 0].min() - 1
  x_max = X_train_std[:, 0].max() + 1
  y_min = X_train_std[:, 1].min() - 1
  y_max = X_train_std[:, 1].max() + 1
  # グリッドポイントを生成
  xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),
                       np.arange(y_min, y_max, 0.1))
  # 描画領域を2行2列に分割
  plt.close("all")
  f, axarr = plt.subplots(nrows = 2, ncols = 2,
                          sharex = "col",
                          sharey = "row",
                          figsize = (7, 5))
  # 決定領域のプロット、青や赤の散布図の作成などを実行
  # 変数idxは各分類器を描画する行と列の位置を表すタプル
  for idx, clf, tt in zip(product([0, 1], [0, 1]), all_clf, clf_labels):
        clf.fit(X_train_std, y_train)
        Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
        Z = Z.reshape(xx.shape)
        axarr[idx[0], idx[1]].contourf(xx, yy, Z, alpha = 0.3)
        axarr[idx[0], idx[1]].scatter(X_train_std[y_train == 0, 0],
                                      X_train_std[y_train == 0, 1],
                                      c = "blue",
                                      marker = "^",
                                      s = 50)
        axarr[idx[0], idx[1]].scatter(X_train_std[y_train == 1, 0],
                                      X_train_std[y_train == 1, 1],
                                      c = "green",
                                      marker = "o",
                                      s = 50)
        axarr[idx[0], idx[1]].set_title(tt)

  plt.text(-3.5, -5.,
           s = "Sepal width [standardized]",
           ha = "center",
           va = "center",
           fontsize = 12)
  plt.text(-12.5, 4.5,
           s = "Petal length [standardized]",
           ha = "center",
           va = "center",
           fontsize = 12,
           rotation = 90)

  fname = "images/07_05.png"
  plt.savefig(fname)
  fname
#+end_src

#+RESULTS:
[[file:images/07_05.png]]

パラメータにアクセスする
#+begin_src python :session :results output
  print(mv_clf.get_params())
#+end_src

#+RESULTS:
: {'pipeline-1': Pipeline(steps=[('sc', StandardScaler()),
:                 ['clf', LogisticRegression(C=0.001, random_state=1)]]), 'decisiontreeclassifier': DecisionTreeClassifier(criterion='entropy', max_depth=1, random_state=0), 'pipeline-2': Pipeline(steps=[('sc', StandardScaler()),
:                 ['clf', KNeighborsClassifier(n_neighbors=1)]]), 'pipeline-1__memory': None, 'pipeline-1__steps': [('sc', StandardScaler()), ['clf', LogisticRegression(C=0.001, random_state=1)]], 'pipeline-1__verbose': False, 'pipeline-1__sc': StandardScaler(), 'pipeline-1__clf': LogisticRegression(C=0.001, random_state=1), 'pipeline-1__sc__copy': True, 'pipeline-1__sc__with_mean': True, 'pipeline-1__sc__with_std': True, 'pipeline-1__clf__C': 0.001, 'pipeline-1__clf__class_weight': None, 'pipeline-1__clf__dual': False, 'pipeline-1__clf__fit_intercept': True, 'pipeline-1__clf__intercept_scaling': 1, 'pipeline-1__clf__l1_ratio': None, 'pipeline-1__clf__max_iter': 100, 'pipeline-1__clf__multi_class': 'deprecated', 'pipeline-1__clf__n_jobs': None, 'pipeline-1__clf__penalty': 'l2', 'pipeline-1__clf__random_state': 1, 'pipeline-1__clf__solver': 'lbfgs', 'pipeline-1__clf__tol': 0.0001, 'pipeline-1__clf__verbose': 0, 'pipeline-1__clf__warm_start': False, 'decisiontreeclassifier__ccp_alpha': 0.0, 'decisiontreeclassifier__class_weight': None, 'decisiontreeclassifier__criterion': 'entropy', 'decisiontreeclassifier__max_depth': 1, 'decisiontreeclassifier__max_features': None, 'decisiontreeclassifier__max_leaf_nodes': None, 'decisiontreeclassifier__min_impurity_decrease': 0.0, 'decisiontreeclassifier__min_samples_leaf': 1, 'decisiontreeclassifier__min_samples_split': 2, 'decisiontreeclassifier__min_weight_fraction_leaf': 0.0, 'decisiontreeclassifier__monotonic_cst': None, 'decisiontreeclassifier__random_state': 0, 'decisiontreeclassifier__splitter': 'best', 'pipeline-2__memory': None, 'pipeline-2__steps': [('sc', StandardScaler()), ['clf', KNeighborsClassifier(n_neighbors=1)]], 'pipeline-2__verbose': False, 'pipeline-2__sc': StandardScaler(), 'pipeline-2__clf': KNeighborsClassifier(n_neighbors=1), 'pipeline-2__sc__copy': True, 'pipeline-2__sc__with_mean': True, 'pipeline-2__sc__with_std': True, 'pipeline-2__clf__algorithm': 'auto', 'pipeline-2__clf__leaf_size': 30, 'pipeline-2__clf__metric': 'minkowski', 'pipeline-2__clf__metric_params': None, 'pipeline-2__clf__n_jobs': None, 'pipeline-2__clf__n_neighbors': 1, 'pipeline-2__clf__p': 2, 'pipeline-2__clf__weights': 'uniform'}

ロジスティック回帰分類器の逆正則化パラメータCと決定木の深さをチューニングする
#+begin_src python :session :results output
  from sklearn.model_selection import GridSearchCV
  params = {"decisiontreeclassifier__max_depth": [1, 2],
            "pipeline-1__clf__C": [0.001, 0.1, 100.0]}
  grid = GridSearchCV(estimator = mv_clf,
                      param_grid = params,
                      cv = 10,
                      scoring = "roc_auc")
  grid.fit(X_train, y_train)
#+end_src

#+RESULTS:

10分割交差検証を実施する
#+begin_src python :session :results output
  for r, _ in enumerate(grid.cv_results_["mean_test_score"]):
      print("%0.3f +/- %0.2f %r"
            % (grid.cv_results_["mean_test_score"][r],
               grid.cv_results_["std_test_score"][r] / 2.0,
               grid.cv_results_["params"][r]))

  print("Best parameters: %s" % grid.best_params_)
  print("Accuracy: %.2f" % grid.best_score_)
#+end_src

#+RESULTS:
: 0.983 +/- 0.02 {'decisiontreeclassifier__max_depth': 1, 'pipeline-1__clf__C': 0.001}
: 0.983 +/- 0.02 {'decisiontreeclassifier__max_depth': 1, 'pipeline-1__clf__C': 0.1}
: 0.967 +/- 0.05 {'decisiontreeclassifier__max_depth': 1, 'pipeline-1__clf__C': 100.0}
: 0.983 +/- 0.02 {'decisiontreeclassifier__max_depth': 2, 'pipeline-1__clf__C': 0.001}
: 0.983 +/- 0.02 {'decisiontreeclassifier__max_depth': 2, 'pipeline-1__clf__C': 0.1}
: 0.967 +/- 0.05 {'decisiontreeclassifier__max_depth': 2, 'pipeline-1__clf__C': 100.0}
: Best parameters: {'decisiontreeclassifier__max_depth': 1, 'pipeline-1__clf__C': 0.001}
: Accuracy: 0.98

* バギング：ブートストラップ標本を使った分類器アンサンブルの構築
アンサンブルを構築している個々の分類器の学習に同じ訓練データセットを使うのではなく、最初の訓練データセットからブートストラップ標本を抽出する。

** バギングを使ってWineデータセットのデータ点を分類する
Wineクラス2および3を選択し、「Alcohol」と「OD280/OD315 of diluted wines」の2つの特徴量を選択する。
#+begin_src python :session :results output
  import pandas as pd
  df_wine = pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/"
                        "wine/wine.data", header = None)
  df_wine.columns = ["Class label", "Alcohol", "Malic acid", "Ash",
                     "Alcalinity of ash", "Magnesium", "Total phenols",
                     "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins",
                     "Color intensity", "Hue", "OD280/OD315 of diluted wines",
                     "Proline"]
  # クラス1を削除
  df_wine = df_wine[df_wine["Class label"] != 1]
  y = df_wine["Class label"].values
  X = df_wine[["Alcohol", "OD280/OD315 of diluted wines"]].values
#+end_src

#+RESULTS:

クラスラベルを2値でエンコードし、データセットを80%の訓練データセットと20%のテストデータセットに分割する
#+begin_src python :session :results output
  from sklearn.preprocessing import LabelEncoder
  from sklearn.model_selection import train_test_split
  le = LabelEncoder()
  y = le.fit_transform(y)
  X_train, X_test, y_train, y_test = train_test_split(
      X, y, test_size = 0.2,
      random_state = 1,
      stratify = y
  )
#+end_src

#+RESULTS:

剪定されていない決定木をベース分類器として利用する。
500個からなるアンサンブルを作成。
#+begin_src python :session :results output
  from sklearn.ensemble import BaggingClassifier
  from sklearn.tree import DecisionTreeClassifier
  tree = DecisionTreeClassifier(criterion = "entropy",
                                max_depth = None,
                                random_state = 1)
  bag = BaggingClassifier(estimator = tree,
                          n_estimators = 500,
                          max_samples = 1.0,
                          max_features = 1.0,
                          bootstrap = True,
                          bootstrap_features = False,
                          n_jobs = 1,
                          random_state = 1)
#+end_src

#+RESULTS:

剪定されていない決定木の性能
#+begin_src python :session :results output
  from sklearn.metrics import accuracy_score
  tree = tree.fit(X_train, y_train)
  y_train_pred = tree.predict(X_train)
  y_test_pred = tree.predict(X_test)
  tree_train = accuracy_score(y_train, y_train_pred)
  tree_test = accuracy_score(y_test, y_test_pred)
  print("Decision tree train/test accuracies %.3f/%.3f" % (tree_train, tree_test))
#+end_src

#+RESULTS:
: Decision tree train/test accuracies 1.000/0.833

バギング分類器の性能
#+begin_src python :session :results output
  bag = bag.fit(X_train, y_train)
  y_train_pred = bag.predict(X_train)
  y_test_pred = bag.predict(X_test)
  bag_train = accuracy_score(y_train, y_train_pred)
  bag_test = accuracy_score(y_test, y_test_pred)
  print("Bagging train/test accuracies %.3f/%.3f" % (bag_train, bag_test))
#+end_src

#+RESULTS:
: Bagging train/test accuracies 1.000/0.917

決定木とバギング分類器の決定領域を比較
#+begin_src python :session :results file link
  import matplotlib.pyplot as plt
  import numpy as np

  x_min = X_train[:, 0].min() - 1
  x_max = X_train[:, 0].max() + 1
  y_min = X_train[:, 1].min() - 1
  y_max = X_train[:, 1].max() + 1

  xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),
                       np.arange(y_min, y_max, 0.1))
  plt.close("all")
  f, axarr = plt.subplots(nrows = 1, ncols = 2,
                          sharex = "col",
                          sharey = "row",
                          figsize = (8, 3))
  for idx, clf, tt in zip([0, 1], [tree, bag], ["Decision tree", "Bagging"]):
      clf.fit(X_train, y_train)
      Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
      Z = Z.reshape(xx.shape)
      axarr[idx].contourf(xx, yy, Z, alpha=0.3)
      axarr[idx].scatter(X_train[y_train == 0, 0],
                         X_train[y_train == 0, 1], c = "blue", marker = "^")
      axarr[idx].scatter(X_train[y_train == 1, 0],
                         X_train[y_train == 1, 1], c = "green", marker = "o")
      axarr[idx].set_title(tt)

  axarr[0].set_ylabel("Alcohol", fontsize = 12)
  plt.tight_layout()
  plt.text(0, -0.2, s = "OD280/OD315 of diluted wines",
           ha = "center", va = "center", fontsize = 12, transform = axarr[1].transAxes)
  fname = "images/07_08.png"
  plt.savefig(fname)
  fname
#+end_src

#+RESULTS:
[[file:images/07_08.png]]

* アダブーストによる弱学習器の活用
誤分類された訓練データをあとから弱学習器に学習させることで、アンサンブルの性能を向上させる

** ブースティングの仕組み
1. 訓練データセットDから訓練データのランダムなサブセットd_1を非復元抽出し、弱学習器C_1を訓練する
2. 2つ目のランダムな訓練データセットd_2を訓練データセットを訓練データセットから非復元抽出し、以前に誤分類されたデータ点の50%を追加して、弱学習器C_2を訓練する
3. 訓練データセットDから、C_1とC_2の結果が異なる訓練データd_3を洗い出し、3つ目の弱学習器C_3を訓練する
4. 弱学習器C_1, C_2, C_3を多数決により組み合わせる
