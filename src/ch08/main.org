*機械学習の適用1 感情分析*

#+begin_src emacs-lisp
  (pyvenv-activate "~/project/python_machine_learning")
#+end_src

#+RESULTS:

* IMDbの映画レビューデータセットでのテキスト処理

** 映画レビューデータセットを取得する
#+begin_src python :session :results value
  import pyprind
  import pandas as pd
  import os
  # "basepath"の値を展開した映画レビューデータセットのディレクトリに置き換える
  basepath = "aclImdb"
  labels = {"pos": 1, "neg": 0}
  pbar = pyprind.ProgBar(50000)
  df = pd.DataFrame()
  for s in ("test", "train"):
      for l in ("pos", "neg"):
          path = os.path.join(basepath, s, l)
          for file in sorted(os.listdir(path)):
              with open(os.path.join(path, file), "r", encoding = "utf-8") as infile:
                  txt = infile.read()
              df = df._append([[txt, labels[l]]], ignore_index = True)
              pbar.update()

  df.columns = ["review", "sentiment"]
\
#+end_src

#+RESULTS:

#+begin_src python :session :results output
  import numpy as np
  np.random.seed(0)
  df = df.reindex(np.random.permutation(df.index))
  df.to_csv("movie_data.csv", index = False, encoding = "utf-8")
#+end_src

#+RESULTS:

#+begin_src python :session :results value
  df = pd.read_csv("movie_data.csv", encoding = "utf-8")
  df.head(3)
#+end_src

#+RESULTS:
:                                               review  sentiment
: 0  In 1974, the teenager Martha Moxley (Maggie Gr...          1
: 1  OK... so... I really like Kris Kristofferson a...          0
: 2  ***SPOILER*** Do not read this, if you think a...          0

1のクラスラベルは「肯定的」、0のラベルは「否定的」を表す

DataFrameオブジェクトが50,000行で構成されていることを確認
#+begin_src python :session :results value
  df.shape
#+end_src

#+RESULTS:
| 50000 | 2 |

* BoWモデルの紹介

** 単語を特徴量ベクトルに変換する
各文章に含まれる単語に基づいてBoWモデルを構築するには、scikit-learnに実装されているCountVectorizerクラスを利用できる。
#+begin_src python :session :results value
  import numpy as np
  from sklearn.feature_extraction.text import CountVectorizer
  count = CountVectorizer()
  docs = np.array([
      "The sun is shining",
      "The weather is sweet",
      "The sun is shining, the weather is sweet, and one and one is two",
  ])
  bag = count.fit_transform(docs)
  bag
#+end_src

#+RESULTS:
#+begin_example
<Compressed Sparse Row sparse matrix of dtype 'int64'
	with 17 stored elements and shape (3, 9)>
  Coords	Values
  (0, 6)	1
  (0, 4)	1
  (0, 1)	1
  (0, 3)	1
  (1, 6)	1
  (1, 1)	1
  (1, 8)	1
  (1, 5)	1
  (2, 6)	2
  (2, 4)	1
  (2, 1)	3
  (2, 3)	1
  (2, 8)	1
  (2, 5)	1
  (2, 0)	2
  (2, 2)	2
  (2, 7)	1
#+end_example

#+begin_src python :session :results output
  print(count.vocabulary_)
#+end_src

#+RESULTS:
: {'the': 6, 'sun': 4, 'is': 1, 'shining': 3, 'weather': 8, 'sweet': 5, 'and': 0, 'one': 2, 'two': 7}

#+begin_src python :session :results output
  print(bag.toarray())
#+end_src

#+RESULTS:
: [[0 1 0 1 1 0 1 0 0]
:  [0 1 0 0 0 1 1 0 1]
:  [2 3 2 1 1 1 2 1 1]]
