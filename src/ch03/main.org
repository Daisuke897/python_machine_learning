分類問題 機械学習ライブラリscikit-learnの活用

#+begin_src emacs-lisp
  (pyvenv-activate "~/project/python_machine_learning")
#+end_src

#+RESULTS:

* 教師あり学習のアルゴリズムの訓練 5つの手順で構成
1. 特徴量を選択し、ラベル付けされた訓練データを収集する
2. 性能指標を選択する
3. 分類器と最適化アルゴリズムを選択する
4. モデルの性能を評価する
5. アルゴリズムを調整する

* パーセプトロンの訓練
#+begin_src python :session :results output
  from sklearn import datasets
  import numpy as np

  iris = datasets.load_iris()

  X = iris.data[:, [2, 3]]

  y = iris.target

  print('Class labels:', np.unique(y))
#+end_src

#+RESULTS:
: Class labels: [0 1 2]

Iris-setosa, Iris-versicolor, Iris-virginicaが(0, 1, 2)に対応している
整数のラベルに符号化することが推奨される。

データセットをさらに訓練データとセットとテストデータセットに分割する
#+begin_src python :session :results output
  from sklearn.model_selection import train_test_split

  X_train, X_test, y_train, y_test = train_test_split(
      X, y, test_size=0.3, random_state=1, stratify=y
      )

  print('Labels count in y:', np.bincount(y))
  print('Labels count in y_train:', np.bincount(y_train))
  print('Labels count in y_test:', np.bincount(y_test))
#+end_src

#+RESULTS:
: Labels count in y: [50 50 50]
: Labels count in y_train: [35 35 35]
: Labels count in y_test: [15 15 15]

平均と標準偏差を用いて標準化させる
#+begin_src python :session :results output
  from sklearn.preprocessing import StandardScaler

  sc = StandardScaler()

  sc.fit(X_train)

  X_train_std = sc.transform(X_train)
  X_test_std = sc.transform(X_test)
#+end_src

#+RESULTS:

#+begin_src python :session :results output
  from sklearn.linear_model import Perceptron

  ppn = Perceptron(eta0=0.1, random_state=1)

  ppn.fit(X_train_std, y_train)
#+end_src

#+RESULTS:

predictメゾットを使って予測を行える
#+begin_src python :session :results output
  y_pred = ppn.predict(X_test_std)

  print('Misclassified examples: %d' % (y_test != y_pred).sum())
#+end_src

#+RESULTS:
: Misclassified examples: 1

正解率を計算する
#+begin_src python :session :results output
  from sklearn.metrics import accuracy_score

  print('Accuracy: %.3f' % accuracy_score(y_test, y_pred))
#+end_src

#+RESULTS:
: Accuracy: 0.978

#+begin_src python :session :results output
  from matplotlib.colors import ListedColormap
  import matplotlib.pyplot as plt

  def plot_decision_regions(
          X, y, classifier, test_idx=None, resolution=0.02
  ):

      # setup marker generator and color map
      markers = ('s', 'x', 'o', '^', 'v')
      colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
      cmap = ListedColormap(colors[:len(np.unique(y))])

      # plot the decision surface
      x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
      x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
      xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                             np.arange(x2_min, x2_max, resolution))
      Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
      Z = Z.reshape(xx1.shape)
      plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)
      plt.xlim(xx1.min(), xx1.max())
      plt.ylim(xx2.min(), xx2.max())

      for idx, cl in enumerate(np.unique(y)):
          plt.scatter(x=X[y == cl, 0],
                      y=X[y == cl, 1],
                      alpha=0.8,
                      color=colors[idx],
                      marker=markers[idx],
                      label=cl,
                      edgecolor='black')

      # highlight test examples
      if test_idx:
          # plot all examples
          X_test, y_test = X[test_idx, :], y[test_idx]

          plt.scatter(X_test[:, 0],
                      X_test[:, 1],
                      c="none",
                      edgecolor='black',
                      alpha=1.0,
                      linewidth=1,
                      marker='o',
                      s=100,
                      label='test set')

#+end_src

#+RESULTS:

#+begin_src python :session :results file link
  import matplotlib.pyplot as plt

  plt.close('all')

  X_combined_std = np.vstack((X_train_std, X_test_std))
  y_combined = np.hstack((y_train, y_test))

  plot_decision_regions(X=X_combined_std, y=y_combined,
                        classifier=ppn, test_idx=range(105, 150))
  plt.xlabel('petal length [standardized]')
  plt.ylabel('petal width [standardized]')
  plt.legend(loc='upper left')

  plt.tight_layout()

  fname = "images/03_01.png"
  plt.savefig(fname)

  fname

#+end_src

#+RESULTS:
[[file:images/03_01.png]]

線形の決定境界で区切られるが、線形分離が可能な状況は稀

* ロジスティック回帰
2値分類のための線形モデル

#+begin_src python :session :results file link
  import matplotlib.pyplot as plt
  import numpy as np

  def sigmoid(z):
      return 1.0 / (1.0 + np.exp(-z))

  z = np.arange(-7, 7, 0.1)

  phi_z = sigmoid(z)

  plt.close("all")

  plt.plot(z, phi_z)

  plt.axvline(0.0, color='k')

  plt.ylim(-0.1, 1.1)

  plt.xlabel("z")
  plt.ylabel("$\phi (z)$")

  plt.yticks([0.0, 0.5, 1.0])

  ax = plt.gca()

  ax.yaxis.grid(True)

  plt.tight_layout()

  fname = "images/03_02.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_02.png]]

* ロジスティック関数の重みの学習

#+begin_src python :session :results file link
  def cost_1(z):
      return - np.log(sigmoid(z))

  def cost_0(z):
      return - np.log(1 - sigmoid(z))

  plt.close("all")

  z = np.arange(-10, 10, 0.1)

  phi_z = sigmoid(z)

  c1 = [cost_1(x) for x in z]

  plt.plot(phi_z, c1, label="J(w) if y=1")

  c0 = [cost_0(x) for x in z]

  plt.plot(phi_z, c0, linestyle="--", label="J(w) if y=0")

  plt.ylim(0.0, 5.1)

  plt.xlim([0, 1])

  plt.xlabel("$\phi$(z)")
  plt.ylabel("J(w)")

  plt.legend(loc="upper center")

  plt.tight_layout()

  fname = "images/03_03_02.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_03_02.png]]

#+begin_src python :session :results output
  class LogisticRegressionGD(object):
      """
      Logistic Regression Classifier using gradient descent.
      """

      def __init__(self, eta=0.05, n_iter=100, random_state=1):
          self.eta = eta
          self.n_iter = n_iter
          self.random_state = random_state

      def fit(self, X, y):
          """
          Fit training data.
          """
          rgen = np.random.RandomState(self.random_state)
          self.w_ = rgen.normal(loc=0.0, scale=0.01, size=1 + X.shape[1])
          self.cost_ = []

          for i in range(self.n_iter):
              net_input = self.net_input(X)
              output = self.activation(net_input)
              errors = (y - output)
              self.w_[1:] += self.eta * X.T.dot(errors)
              self.w_[0] += self.eta * errors.sum()

              cost = -y.dot(np.log(output)) - ((1 - y).dot(np.log(1 - output)))
              self.cost_.append(cost)

          return self

      def net_input(self, X):
          """Calculate net input"""

          return np.dot(X, self.w_[1:]) + self.w_[0]

      def activation(self, z):
          """Compute logistic sigmoid activation"""

          return 1. / (1. + np.exp(-np.clip(z, -250, 250)))

      def predict(self, X):
          """Return class label after unit step"""

          return np.where(self.net_input(X) >= 0.0, 1, 0)
#+end_src

#+RESULTS:

ロジスティック回帰モデルを適合させる際には、
そのモデルがうまくいくのは二値分類に限られることを覚えておく必要がある

#+begin_src python :session :results file link
  X_train_01_subset = X_train[(y_train == 0) | (y_train == 1)]
  y_train_01_subset = y_train[(y_train == 0) | (y_train == 1)]

  plt.close("all")

  lrgd = LogisticRegressionGD(eta=0.05, n_iter=1000, random_state=1)
  lrgd.fit(X_train_01_subset,
           y_train_01_subset)

  plot_decision_regions(X=X_train_01_subset,
                        y=y_train_01_subset,
                        classifier=lrgd)

  plt.xlabel('petal length [standardized]')
  plt.ylabel('petal width [standardized]')
  plt.legend(loc='upper left')

  plt.tight_layout()

  fname = "images/03_05.png"
  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_05.png]]

scikit-learnを使ってロジスティック回帰モデルの訓練をする
#+begin_src python :session :results file link
  from sklearn.linear_model import LogisticRegression

  lr = LogisticRegression(C=100.0, random_state=1, solver="lbfgs", multi_class="ovr")

  lr.fit(X_train_std, y_train)

  plt.close("all")

  plot_decision_regions(
      X_combined_std,
      y_combined,
      classifier=lr,
      test_idx=range(105, 150))


  plt.xlabel("petal length [standardized]")
  plt.ylabel("petal width [standardized]")

  plt.legend(loc="upper left")

  plt.tight_layout()

  fname = "images/03_06.png"
  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_06.png]]

訓練データが特定のクラスに所属するクラスは"predict_proba"メゾットを使って計算できる。
テストデータの最初の3つのデータ点の確率を次のように予測できる。
#+begin_src python :session :results value
  lr.predict_proba(X_test_std[:3, :])
#+end_src

#+RESULTS:
| 6.63770505e-09 | 0.144747233 |     0.85525276 |
|     0.83403121 |  0.16596879 | 3.20815954e-13 |
|    0.848822884 | 0.151177116 |  2.5799835e-14 |

クラスラベルの予測値を取得
#+begin_src python :session :results value
  lr.predict_proba(X_test_std[:3, :]).argmax(axis=1)
#+end_src

#+RESULTS:
| 2 | 0 | 0 |

#+begin_src python :session :results value
  lr.predict(X_test_std[:3, :])
#+end_src

#+RESULTS:
| 2 | 0 | 0 |

#+begin_src python :session :results value
  lr.predict(X_test_std[0, :].reshape(1, -1))
#+end_src

#+RESULTS:
| 2 |

* 正則化による過学習への対処

極端なパラメータの重みにペナルティを課すための追加情報を導入する
最も一般的な正則化はL2正則化
#+begin_src python :session :results file link
  weights, params = [], []

  for c in np.arange(-5, 5):
      lr = LogisticRegression(C=10.**c, random_state=1,
                              solver='lbfgs', multi_class='ovr')
      lr.fit(X_train_std, y_train)
      weights.append(lr.coef_[1])
      params.append(10.**c)

  weights = np.array(weights)

  plt.close("all")

  plt.plot(params, weights[:, 0], label="petal length")
  plt.plot(params, weights[:, 1], linestyle="--", label="petal width")
  plt.ylabel("weight coefficient")
  plt.xlabel("C")
  plt.legend(loc="upper left")
  plt.xscale("log")

  fname = "images/03_08.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_08.png]]

Cを小さくする、すなわち、正則化を強める

* サポートベクトルマシン
SVMでの最適化の目的は、マージンを最大化することである。
マージンは、超平面（決定境界）と、この超平面に最も近い訓練データの間の距離として定義される。

#+begin_src python :session :results file link
  from sklearn.svm import SVC

  svm = SVC(kernel="linear", C=1.0, random_state=1)

  svm.fit(X_train_std, y_train)

  plt.close("all")

  plot_decision_regions(X_combined_std, y_combined, classifier=svm,
                        test_idx=range(105, 150))

  plt.xlabel("petal length [standardized]")
  plt.ylabel("petal width [standardized]")

  plt.legend(loc="upper left")
  plt.tight_layout()

  fname = "images/03_11.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_11.png]]

** scikit-learn での代替実装

#+begin_src python :session :results output
  from sklearn.linear_model import SGDClassifier

  ppn = SGDClassifier(loss="perceptron")

  lr = SGDClassifier(loss="log")

  svm = SGDClassifier(loss="hinge")
#+end_src

#+RESULTS:

** カーネルSVMを使った非線形問題の求解
SVMが人気の理由 非線形問題を解くために、「カーネル化」が容易である点

#+begin_src python :session :results file link
  import matplotlib.pyplot as plt
  import numpy as np

  np.random.seed(1)

  X_xor = np.random.randn(200, 2)

  y_xor = np.logical_xor(X_xor[:, 0] > 0, X_xor[:, 1] > 0)

  y_xor = np.where(y_xor, 1, -1)

  plt.close("all")

  plt.scatter(X_xor[y_xor==1, 0], X_xor[y_xor==1, 1], c="b", marker="x", label="1")
  plt.scatter(X_xor[y_xor==-1, 0], X_xor[y_xor==-1, 1], c="r", marker="s", label="-1")

  plt.xlim([-3, 3])
  plt.ylim([-3, 3])

  plt.legend(loc="best")

  plt.tight_layout()

  fname = "images/03_12.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_12.png]]

#+begin_src python :session :results file link
  svm = SVC(kernel="rbf", random_state=1, gamma=0.10, C=10.0)
  svm.fit(X_xor, y_xor)
  plt.close("all")
  plot_decision_regions(X_xor, y_xor, classifier=svm)
  plt.legend(loc='upper left')
  plt.tight_layout()

  fname="images/03_14.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_14.png]]

γパラメータの値を大きくすると、訓練データの影響力が大きくなり、到達範囲が広くなる。
決定境界が狭くなり、突き出したようになる。

#+begin_src python :session :results file link
  svm = SVC(kernel="rbf", random_state=1, gamma=0.2, C=1.0)
  svm.fit(X_train_std, y_train)

  plt.close("all")

  plot_decision_regions(X_combined_std, y_combined,
                        classifier=svm, test_idx=range(105, 150))

  plt.xlabel("petal length [standardized]")
  plt.ylabel("petal width [standardized]")

  plt.legend(loc="upper left")
  plt.tight_layout()

  fname="images/03_15.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_15.png]]

#+begin_src python :session :results file link
  svm = SVC(kernel="rbf", random_state=1, gamma=100.0, C=1.0)
  svm.fit(X_train_std, y_train)

  plt.close("all")

  plot_decision_regions(X_combined_std, y_combined,
                        classifier=svm, test_idx=range(105, 150))

  plt.xlabel("petal length [standardized]")
  plt.ylabel("petal width [standardized]")

  plt.legend(loc="upper left")
  plt.tight_layout()

  fname="images/03_16.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_16.png]]

過学習やバリアンスの制御でもγパラメータの最適化が重要な役割を果たすことを示している。
