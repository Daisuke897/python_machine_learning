分類問題 機械学習ライブラリscikit-learnの活用

#+begin_src emacs-lisp
  (pyvenv-activate "~/project/python_machine_learning")
#+end_src

#+RESULTS:

* 教師あり学習のアルゴリズムの訓練 5つの手順で構成
1. 特徴量を選択し、ラベル付けされた訓練データを収集する
2. 性能指標を選択する
3. 分類器と最適化アルゴリズムを選択する
4. モデルの性能を評価する
5. アルゴリズムを調整する

* パーセプトロンの訓練
#+begin_src python :session :results output
  from sklearn import datasets
  import numpy as np

  iris = datasets.load_iris()

  X = iris.data[:, [2, 3]]

  y = iris.target

  print('Class labels:', np.unique(y))
#+end_src

#+RESULTS:
: Class labels: [0 1 2]

Iris-setosa, Iris-versicolor, Iris-virginicaが(0, 1, 2)に対応している
整数のラベルに符号化することが推奨される。

データセットをさらに訓練データとセットとテストデータセットに分割する
#+begin_src python :session :results output
  from sklearn.model_selection import train_test_split

  X_train, X_test, y_train, y_test = train_test_split(
      X, y, test_size=0.3, random_state=1, stratify=y
      )

  print('Labels count in y:', np.bincount(y))
  print('Labels count in y_train:', np.bincount(y_train))
  print('Labels count in y_test:', np.bincount(y_test))
#+end_src

#+RESULTS:
: Labels count in y: [50 50 50]
: Labels count in y_train: [35 35 35]
: Labels count in y_test: [15 15 15]

平均と標準偏差を用いて標準化させる
#+begin_src python :session :results output
  from sklearn.preprocessing import StandardScaler

  sc = StandardScaler()

  sc.fit(X_train)

  X_train_std = sc.transform(X_train)
  X_test_std = sc.transform(X_test)
#+end_src

#+RESULTS:

#+begin_src python :session :results output
  from sklearn.linear_model import Perceptron

  ppn = Perceptron(eta0=0.1, random_state=1)

  ppn.fit(X_train_std, y_train)
#+end_src

#+RESULTS:

predictメゾットを使って予測を行える
#+begin_src python :session :results output
  y_pred = ppn.predict(X_test_std)

  print('Misclassified examples: %d' % (y_test != y_pred).sum())
#+end_src

#+RESULTS:
: Misclassified examples: 1

正解率を計算する
#+begin_src python :session :results output
  from sklearn.metrics import accuracy_score

  print('Accuracy: %.3f' % accuracy_score(y_test, y_pred))
#+end_src

#+RESULTS:
: Accuracy: 0.978

#+begin_src python :session :results output
  from matplotlib.colors import ListedColormap
  import matplotlib.pyplot as plt

  def plot_decision_regions(
          X, y, classifier, test_idx=None, resolution=0.02
  ):

      # setup marker generator and color map
      markers = ('s', 'x', 'o', '^', 'v')
      colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
      cmap = ListedColormap(colors[:len(np.unique(y))])

      # plot the decision surface
      x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
      x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
      xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                             np.arange(x2_min, x2_max, resolution))
      Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
      Z = Z.reshape(xx1.shape)
      plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)
      plt.xlim(xx1.min(), xx1.max())
      plt.ylim(xx2.min(), xx2.max())

      for idx, cl in enumerate(np.unique(y)):
          plt.scatter(x=X[y == cl, 0],
                      y=X[y == cl, 1],
                      alpha=0.8,
                      color=colors[idx],
                      marker=markers[idx],
                      label=cl,
                      edgecolor='black')

      # highlight test examples
      if test_idx:
          # plot all examples
          X_test, y_test = X[test_idx, :], y[test_idx]

          plt.scatter(X_test[:, 0],
                      X_test[:, 1],
                      c="none",
                      edgecolor='black',
                      alpha=1.0,
                      linewidth=1,
                      marker='o',
                      s=100,
                      label='test set')

#+end_src

#+RESULTS:

#+begin_src python :session :results file link
  import matplotlib.pyplot as plt

  plt.close('all')

  X_combined_std = np.vstack((X_train_std, X_test_std))
  y_combined = np.hstack((y_train, y_test))

  plot_decision_regions(X=X_combined_std, y=y_combined,
                        classifier=ppn, test_idx=range(105, 150))
  plt.xlabel('petal length [standardized]')
  plt.ylabel('petal width [standardized]')
  plt.legend(loc='upper left')

  plt.tight_layout()

  fname = "images/03_01.png"
  plt.savefig(fname)

  fname

#+end_src

#+RESULTS:
[[file:images/03_01.png]]

線形の決定境界で区切られるが、線形分離が可能な状況は稀

* ロジスティック回帰
2値分類のための線形モデル

#+begin_src python :session :results file link
  import matplotlib.pyplot as plt
  import numpy as np

  def sigmoid(z):
      return 1.0 / (1.0 + np.exp(-z))

  z = np.arange(-7, 7, 0.1)

  phi_z = sigmoid(z)

  plt.close("all")

  plt.plot(z, phi_z)

  plt.axvline(0.0, color='k')

  plt.ylim(-0.1, 1.1)

  plt.xlabel("z")
  plt.ylabel("$\phi (z)$")

  plt.yticks([0.0, 0.5, 1.0])

  ax = plt.gca()

  ax.yaxis.grid(True)

  plt.tight_layout()

  fname = "images/03_02.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/03_02.png]]

* ロジスティック関数の重みの学習

#+begin_src python :session
  def cost_1(z):
      return - np.log(sigmoid(z))

  def cost_0(z):
      return - np.log(1 - sigmoid(z))

  z = np.arange(-10, 10, 0.1)
#+end_src

#+RESULTS:
