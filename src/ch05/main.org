次元削減でデータを圧縮する

#+begin_src emacs-lisp
  (pyvenv-activate "~/project/python_machine_learning")
#+end_src

#+RESULTS:

* 主成分分析による教師なし次元削減

** 主成分を抽出する

Wineデータ・セットを読み込む
#+begin_src python :session :results value
  import numpy as np
  import pandas as pd

  df_wine = pd.read_csv(
      'https://archive.ics.uci.edu/'
      'ml/machine-learning-databases/wine/wine.data',
      header=None
  )
  df_wine.columns = ['Class label', 'Alcohol', 'Malic acid', 'Ash',
                     'Alcalinity of ash', 'Magnesium', 'Total phenols',
                     'Flavanoids', 'Nonflavanoid phenols', 'Proanthocyanins',
                     'Color intensity', 'Hue', 'OD280/OD315 of diluted wines',
                     'Proline']


  print('Class labels', np.unique(df_wine['Class label']))
  df_wine.head()
#+end_src

#+RESULTS:
:    Class label  Alcohol  ...  OD280/OD315 of diluted wines  Proline
: 0            1    14.23  ...                          3.92     1065
: 1            1    13.20  ...                          3.40     1050
: 2            1    13.16  ...                          3.17     1185
: 3            1    14.37  ...                          3.45     1480
: 4            1    13.24  ...                          2.93      735
: 
: [5 rows x 14 columns]

Wineデータセットを処理して訓練とテストに分割
分散が1となるように標準化

#+begin_src python :session :results output
  from sklearn.model_selection import train_test_split
  from sklearn.preprocessing import StandardScaler

  X = df_wine.iloc[:, 1:].values
  y = df_wine.iloc[:, 0].values

  X_train, X_test, y_train, y_test = train_test_split(
      X, y, test_size = 0.3, stratify = y, random_state = 0
  )

  sc = StandardScaler()
  X_train_std = sc.fit_transform(X_train)
  X_test_std = sc.transform(X_test)
#+end_src

#+RESULTS:

#+begin_src python :session :results output
  import numpy as np

  cov_mat = np.cov(X_train_std.T) # 共分散行列を作成
  eigen_vals, eigen_vecs = np.linalg.eig(cov_mat) # 固有値と固有ベクトルを計算
  print("\nEigenvalues \n%s" % eigen_vals)
#+end_src

#+RESULTS:
: 
: Eigenvalues 
: [4.84274532 2.41602459 1.54845825 0.96120438 0.84166161 0.6620634
:  0.51828472 0.34650377 0.3131368  0.10754642 0.21357215 0.15362835
:  0.1808613 ]

固有値の分散説明率をプロットする

#+begin_src python :session :results file link
  # 固有値を合計
  tot = sum(eigen_vals)
  # 分散説明率を計算
  var_exp = [(i / tot) for i in sorted(eigen_vals, reverse=True)]
  # 分散説明率の累積和を取得
  cum_var_exp = np.cumsum(var_exp)
  import matplotlib.pyplot as plt
  plt.close("all")
  # 分散説明率の棒グラフを作成
  plt.bar(range(1, 14), var_exp, alpha=0.5, align="center",
          label="Individual explained variance")
  # 分散説明率の累積和の階段グラフを作成
  plt.step(range(1, 14), cum_var_exp, where="mid",
           label="Cumulative explained variance")
  plt.ylabel("Explained variance ratio")
  plt.xlabel("Principal component index")
  plt.legend(loc="best")
  plt.tight_layout()

  fname = "images/05_02.png"

  plt.savefig(fname)

  fname
#+end_src

#+RESULTS:
[[file:images/05_02.png]]

固有値が大きいものから順に固有対を並び替え、選択された固有ベクトルから射影行列を生成する。
そして、この射影行列を使ってデータをより低い次元の部分空間に変換する。

#+begin_src python :session :results output
  # (固有値、固有ベクトル)のタプルのリストを作成
  eigen_pairs = [(np.abs(eigen_vals[i]), eigen_vecs[:, i]) for i in range(len(eigen_vals))]
  # (固有値、固有ベクトル)のタプルを大きいものから順に並び替え
  eigen_pairs.sort(key=lambda k: k[0], reverse=True)
#+end_src

#+RESULTS:

#+begin_src python :session :results value
  eigen_pairs
#+end_src

#+RESULTS:
|  4.8427453156558915 | array | ((-0.13724218 0.24724326 -0.02545159 0.20694508 -0.15436582 -0.39376952 -0.41735106 0.30572896 -0.30668347 0.07554066 -0.32613263 -0.36861022 -0.29669651))                 |
|  2.4160245870352237 | array | ((0.50303478 0.16487119 0.24456476 -0.11352904 0.28974518 0.05080104 -0.02287338 0.09048885 0.00835233 0.54977581 -0.20716433 -0.24902536 0.38022942))                      |
|  1.5484582488203522 | array | ((-0.13774873 0.09615039 0.67777567 0.62504055 0.19613548 0.14031057 0.11705386 0.13121778 0.0304309 -0.07992997 0.05305915 0.13239103 -0.07065022))                        |
|  0.9612043774977361 | array | ((-0.0032961 0.56264669 -0.10897711 0.0338187 -0.36751107 0.24024513 0.1870533 -0.02292622 0.49626233 0.10648294 -0.36905375 0.14201609 -0.16768217))                       |
|  0.8416616104578416 | array | ((-0.29062523 0.08953787 -0.16083499 0.05158734 0.67648707 -0.11851114 -0.10710035 -0.50758161 0.20163462 0.00573607 -0.27691422 -0.06662756 -0.12802904))                  |
|   0.662063404038305 | array | ((0.299096847 0.627036396 0.000389128239 -0.0405836452 0.0657772614 -0.0589776247 -0.030110318 -0.271728086 -0.439997519 -0.411743459 0.141673377 0.175842384 0.138018388)) |
|  0.5182847213561952 | array | ((0.07905293 -0.27400201 0.13232805 0.2239991 -0.40526897 -0.03474194 0.04178357 -0.63114569 -0.32312277 0.26908262 -0.30264066 0.13054014 0.00081134))                     |
|  0.3465037664128673 | array | ((-0.36817641 -0.01257758 0.17757818 -0.44059211 0.1166175 0.35019213 0.21871818 0.19712942 -0.43305587 -0.06684118 -0.45976229 0.11082755 0.00560817))                     |
| 0.31313680047208825 | array | ((-0.39837702 0.11045823 0.38249686 -0.24337385 -0.25898236 -0.34231286 -0.03612316 -0.17143688 0.24437021 -0.15551492 0.02119612 -0.23808956 0.51727846))                  |
| 0.21357214660527357 | array | ((0.37463888 -0.1374056 0.46158303 -0.41895399 0.01004706 -0.22125424 -0.04175136 -0.08875695 0.19992186 -0.22166887 -0.09846946 0.01912058 -0.54253207))                   |
| 0.18086130479496607 | array | ((0.26283426 -0.26676921 -0.11554255 0.19948341 0.02890188 -0.06638686 -0.21334908 0.18639128 0.16808299 -0.46636903 -0.53248388 0.23783528 0.36776336))                    |
| 0.15362835006711062 | array | ((-0.12783451 0.08064016 0.01679249 -0.11084566 0.07938796 -0.49145931 -0.0503074 0.17532803 -0.00367596 0.35975654 0.04046698 0.74222954 0.03873952))                      |
| 0.10754642369670948 | array | ((-0.09448698 0.02636524 0.14274751 -0.13048578 -0.06760808 0.45991766 -0.81458395 -0.09574809 0.06724689 0.08733362 0.12906113 0.18764627 0.01211126))                     |

#+begin_src python :session :results value
  w = np.hstack((eigen_pairs[0][1][:, np.newaxis], eigen_pairs[1][1][:, np.newaxis]))
  w
#+end_src

#+RESULTS:
| -0.13724218 |  0.50303478 |
|  0.24724326 |  0.16487119 |
| -0.02545159 |  0.24456476 |
|  0.20694508 | -0.11352904 |
| -0.15436582 |  0.28974518 |
| -0.39376952 |  0.05080104 |
| -0.41735106 | -0.02287338 |
|  0.30572896 |  0.09048885 |
| -0.30668347 |  0.00835233 |
|  0.07554066 |  0.54977581 |
| -0.32613263 | -0.20716433 |
| -0.36861022 | -0.24902536 |
| -0.29669651 |  0.38022942 |
